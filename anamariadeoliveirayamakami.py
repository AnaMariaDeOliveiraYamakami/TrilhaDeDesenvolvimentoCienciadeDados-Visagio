# -*- coding: utf-8 -*-
"""AnaMariaDeOliveiraYamakami.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eLqG44PIyh9e_s-FGFJ7FG4ybSugcwwN
"""

#Olá! Meu nome é Ana Maria de Oliveira Yamakami, espero que gostem do meu código!

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
#importando bibliotecas


pokemon = pd.read_csv('/content/drive/My Drive/Visagio/aula_1_pokemon.csv')
#pokemon

#Exercício 3.1
print("Resolução Exercício 3.1")

# lista de pesos de castanhas
c_peso = [0.946, 0.918, 0.906, 0.904, 0.858, 0.774, 0.652, 0.516, 0.478, 0.404, 0.396, 0.364, 0.342, 0.304, 
            0.262, 0.208, 0.134, 0.974, 0.792, 0.792, 0.628, 0.552, 0.506, 0.478, 0.462, 0.436, 0.408, 0.378, 
            0.3, 0.298, 0.268, 0.252, 0.16, 0.114, 0.092, 0.936, 0.894, 0.744, 0.706, 0.694, 0.69, 0.652, 0.518, 
            0.508, 0.502, 0.5, 0.47, 0.44, 0.39, 0.384]

# Importe o numpy como np
import numpy as np

# Crie um numpy array a partir de c_peso: np_c_peso
np_c_peso = np.array(c_peso)

# Imprima o tipo de np_c_peso
print("Tipo de np_c_peso: " + str(type(np_c_peso)))

c_kg_preco = 45

# Crie um array a partir de c_peso com a quantia gasta em cada compra: np_c_despesa
np_c_kg_preco = np.array(c_kg_preco)
np_c_despesa = np_c_kg_preco*np.array(c_peso)
print("Array np_c_despesa: " + str(np_c_despesa))
print("Tipo de np_c_despesa: "+ str(type(np_c_despesa)))

# Imprima o peso no indíce 20
print("Peso no indíce 20: "+ str(np_c_peso[21]))

#Exercício 3.2
print ("Exercício 3.2")

castanha = [[2, 0.946, 66.1], 
          [2, 0.918, 32.96], 
          [2, 0.906, 58.76],
          [2, 0.904, 29.14], 
          [2, 0.858, 59.96],
          [2, 0.774, 27.77],
          [2, 0.652, 42.3],
          [2, 0.516, 18.51], 
          [2, 0.478, 17.15],
          [2, 0.404, 28.22], 
          [2, 0.396, 7.88], 
          [2, 0.364, 7.24],
          [2, 0.342, 22.18], 
          [2, 0.304, 10.91], 
          [2, 0.262, 9.41], 
          [2, 0.208, 4.13],
          [2, 0.134, 9.36],
          [4, 0.974, 34.95],
          [4, 0.792, 51.38],
          [4, 0.792, 51.38], 
          [4, 0.628, 12.48], 
          [4, 0.552, 19.81], 
          [4, 0.506, 25], 
          [4, 0.478, 31], 
          [4, 0.462, 32.24],
          [4, 0.436, 28.28],
          [4, 0.408, 14.64],
          [4, 0.378, 13.56],
          [4, 0.3, 19.46],
          [4, 0.298, 10.69],
          [4, 0.268, 9.62],
          [4, 0.252, 16.34],
          [4, 0.16, 3.18],
          [4, 0.114, 4.09],
          [4, 0.092, 5.97],
          [5, 0.936, 65.33],
          [5, 0.894, 32.07],
          [5, 0.744, 48.28], 
          [5, 0.706, 25.34],
          [5, 0.694, 24.91], 
          [5, 0.69, 13.72], 
          [5, 0.652, 42.32], 
          [5, 0.518, 33.6], 
          [5, 0.508, 18.23],
          [5, 0.502, 35.09],
          [5, 0.5, 27.45], 
          [5, 0.47, 9.35], 
          [5, 0.44, 28.54],
          [5, 0.39, 7.76], 
          [5, 0.384, 21.08]]

# Crie um numpy array 2d a partir de castanha: np_castanha
np_castanha = np.array(castanha)

# Imprima o tipo de np_castanha
print("Tipo de np_castanha: "+ str(type(np_castanha)))

# Imprima a forma de np_castanha
print("Forma de np_castanha: "+ str(np_castanha.shape))

# Selecione toda a segunda coluna de np_castanha: np_c_peso
print("Segunda coluna de np_castanha selecionada: ")
np_castanha[:,1]

# Imprima o preço da 14 venda
print("Preço da 14ª venda: "+ str(np_castanha[13,2]))

# Imprima todas as vendas feitas após o dia 2
print("Vendas feitas após o dia 2: "+ str(np_castanha[np_castanha[:,0]>2]))

#Exercício 3.3
print("Exercício 3.3")

# leia o arquivo (tente abrir num editor de texto antes para verificar o separador)
fut_players = pd.read_csv('/content/drive/My Drive/Visagio/aula_1_fut_players.csv')
#fut_players

# mostre as primeiras 10 linhas de dados
fut_players.head(10)

# mostre as últimas 10 linhas de dados
fut_players.tail(10)

# use o método .info() no DataFrame
fut_players.info()

# mostre o resumo estatístico das colunas numericas
fut_players.describe()

#Exercício 3.4
print("Exercício 3.4")

# mostre as 5 primeiras linhas das colunas player_name, position and nationality
fut_players[['player_name', 'position', 'nationality']].head()

#renomeie as colunas player_id, player_name and player_extended_name para id, name and extended_name, respectivamente
fut_players.rename(
    columns={'player_id' : 'id','player_name' : 'name', 'player_extended_name' : 'extended_name'},
    inplace=True
)

fut_players.info()

#imprima a coluna extended_name do 4534º jogador usando loc e iloc
print("Coluna extended_name do 4534º jogador usando loc: "+ str(fut_players.loc[4534].extended_name))

print("Coluna extended_name do 4534º jogador usando iloc: "+ str(fut_players.loc[4534].extended_name))

#nosso DataFrame tem muitas colunas
#crie outro DataFrame (fut_players_2) apenas com as colunas na lista abaixo
selected_columns = ['id', 'name', 'overall', 'nationality', 'position', 'pref_foot', 'base_id']

fut_players_2 = pd.DataFrame(fut_players[selected_columns])

fut_players_2.info()

#queremos ver os melhores jogadores nascidos no Brasil (Brazil), isto é, aqueles com médio (overall) acima de 90
#mostre os 15 primeiros

aux_1 = fut_players_2[(fut_players_2.nationality == 'Brazil')&(fut_players_2.overall > 90)]
aux_1.head(15)

#vários jogadores bons!
#agora mostre os jogadores brasileiros que sejam canhotos (pref_foot é Left) ou que sejam goleiros (position é GK)
aux_2 = fut_players_2[(fut_players_2.nationality == 'Brazil')&((fut_players_2.pref_foot == 'Left')|(fut_players_2.position == 'GK'))]
aux_2.head(20)

#Exercício 3.5
print("Exercício 3.5")

#the_best é um DataDrame dos melhores jogadores em drible (dribbling) e chute (shooting)
the_best = fut_players[(fut_players.dribbling > 90) & (fut_players.shooting > 90)][['id', 'name', 'position', 'dribbling', 'shooting', 'overall']]

#nationalities é um DataDrame da nacionalidade dos jogadores
nationalities = fut_players[['id', 'name', 'nationality']]

#faça um merge dos dois DataDrames para obter a nacionalidade dos melhores jogadores (dica: chave é o id)
the_best_nationality = pd.merge(the_best,nationalities, how='inner', on=['id','name'] )
the_best_nationality.head()

#Exercício 3.6
print("Exercício 3.6")

#cria o DataDrame country_avg_overall, que tem o overall médio de cada país (nationality), usando groupby
country_avg_overall = fut_players.groupby('nationality').overall.mean()

#usamos o método idxmax() para encontrar o maior overall médio
print("Melhor overall médio: \n", country_avg_overall.loc[country_avg_overall.idxmax()])
print("Overall médio do Brasil: ", country_avg_overall.loc["Brazil"])

#Exercício 3.7
print("Exercício 3.7")

#Crie uma função que retorna a classificação para o jogador de acordo com as instruções abaixo,
# então aplique isso para o dataframe fut_players.

def get_classification(overall):
    """
    Recebe um overall de algum jogador e retorna a classificação conforme a seguir:
    Overall -> classification
    -50     -> "Amador"
    50-60   -> "Ruim"
    60-70   -> "Ok"
    70-80   -> "Bom"
    80-90   -> "Ótimo"
    90+     -> "Lenda"
    
    I: int overall
    O: string
    """
    if overall <= 50:
      return("Amador")

    elif overall <= 60 :
      return("Ruim")

    elif overall <=70:
      return("Ok")

    elif overall <=80:
      return("Bom")

    elif overall <=90:
      return("Ótimo")

    elif overall> 90:
      return("Lenda")

fut_players["classification"] = fut_players['overall'].apply(get_classification)
fut_players.head()

